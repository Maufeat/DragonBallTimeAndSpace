Shader "CustomUI/Bloom" {
Properties {
[PerRendererData]  _MainTex ("Sprite Texture", 2D) = "white" { }
 _Color ("Tint", Color) = (1,1,1,1)
 _StencilComp ("Stencil Comparison", Float) = 8
 _Stencil ("Stencil ID", Float) = 0
 _StencilOp ("Stencil Operation", Float) = 0
 _StencilWriteMask ("Stencil Write Mask", Float) = 255
 _StencilReadMask ("Stencil Read Mask", Float) = 255
 _ColorMask ("Color Mask", Float) = 15
 _Distance ("Distance", Float) = 0.015
}
SubShader { 
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" "CanUseSpriteAtlas"="true" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" "CanUseSpriteAtlas"="true" }
  ZTest [unity_GUIZTestMode]
  ZWrite Off
  Cull Off
  Stencil {
   Ref [_Stencil]
   ReadMask [_StencilReadMask]
   WriteMask [_StencilWriteMask]
   Comp [_StencilComp]
   Pass [_StencilOp]
  }
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask [_ColorMask]
  GpuProgramID 5664
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float4 _Color;
					//   float4 _ScreenParams;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _ScreenParams      c4       1
					//   _Color             c5       1
					//
					
					    vs_2_0
					    def c6, -1, 1, 0, 0
					    dcl_position v0
					    dcl_color v1
					    dcl_texcoord v2
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    mov r1.x, c6.x
					    add r0.zw, r1.x, c4
					    mad oPos.xy, r0.zwzw, c6, r0
					    mul oD0, v1, c5
					    mov oT0.xy, v2
					
					// approximately 9 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0 * _Color;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[6];
						vec4 _Color;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0 * _Color;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Distance;
					//   sampler2D _MainTex;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Distance    c0       1
					//   _MainTex     s0       1
					//
					
					    ps_2_0
					    def c1, 0.111111112, 0, 0, 0
					    dcl v0
					    dcl t0.xy
					    dcl_2d s0
					    add_pp r0.xy, t0, c0.x
					    mov r0.zw, t0.wzyx
					    mov_pp r1.x, r0.x
					    mov r1.y, r0.z
					    mov_pp r2.x, r1.x
					    mov_pp r3.x, r0.w
					    mov_pp r3.y, r0.y
					    mov_pp r4.y, r3.y
					    add_pp r5.xy, t0, -c0.x
					    mov_pp r4.x, r5.x
					    mov_pp r2.y, r5.y
					    mov r4.z, t0.y
					    mov_pp r6.x, r4.x
					    mov r6.y, r4.z
					    mov_pp r2.z, t0.x
					    mov_pp r7.x, r2.z
					    mov_pp r7.y, r2.y
					    texld r8, t0, s0
					    texld r0, r0, s0
					    texld r3, r3, s0
					    texld r1, r1, s0
					    texld r5, r5, s0
					    texld r2, r2, s0
					    texld r4, r4, s0
					    texld r6, r6, s0
					    texld r7, r7, s0
					    mul r0, r0, v0
					    mad_pp r0, r8, v0, r0
					    mad_pp r0, r1, v0, r0
					    mad_pp r0, r3, v0, r0
					    mad_pp r0, r5, v0, r0
					    mad_pp r0, r2, v0, r0
					    mad_pp r0, r4, v0, r0
					    mad_pp r0, r6, v0, r0
					    mad_pp r0, r7, v0, r0
					    mul_pp r0, r0, c1.x
					    mov_pp oC0, r0
					
					// approximately 37 instruction slots used (9 texture, 28 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Distance;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat10_3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.yz = vs_TEXCOORD0.xy + vec2(_Distance);
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yz);
					    u_xlat2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat0 = u_xlat10_0 * vs_COLOR0 + u_xlat2;
					    u_xlat1.xw = vs_TEXCOORD0.yx;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yx);
					    u_xlat10_3 = texture(_MainTex, u_xlat1.wz);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_3 * vs_COLOR0 + u_xlat0;
					    u_xlat1.xw = vs_TEXCOORD0.xy + (-vec2(_Distance));
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xw);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yw);
					    u_xlat10_3 = texture(_MainTex, u_xlat1.xz);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_3 * vs_COLOR0 + u_xlat0;
					    u_xlat1.yz = vs_TEXCOORD0.yx;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_1 * vs_COLOR0 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						float _Distance;
					};
					uniform  sampler2D _MainTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat10_3;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1.yz = vs_TEXCOORD0.xy + vec2(_Distance);
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yz);
					    u_xlat2 = u_xlat10_2 * vs_COLOR0;
					    u_xlat0 = u_xlat10_0 * vs_COLOR0 + u_xlat2;
					    u_xlat1.xw = vs_TEXCOORD0.yx;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yx);
					    u_xlat10_3 = texture(_MainTex, u_xlat1.wz);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_3 * vs_COLOR0 + u_xlat0;
					    u_xlat1.xw = vs_TEXCOORD0.xy + (-vec2(_Distance));
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xw);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.yw);
					    u_xlat10_3 = texture(_MainTex, u_xlat1.xz);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_3 * vs_COLOR0 + u_xlat0;
					    u_xlat1.yz = vs_TEXCOORD0.yx;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat0 = u_xlat10_2 * vs_COLOR0 + u_xlat0;
					    u_xlat0 = u_xlat10_1 * vs_COLOR0 + u_xlat0;
					    SV_Target0 = u_xlat0 * vec4(0.111111112, 0.111111112, 0.111111112, 0.111111112);
					    return;
					}"
}
}
 }
}
}