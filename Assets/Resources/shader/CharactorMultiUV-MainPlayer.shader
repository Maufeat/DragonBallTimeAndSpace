Shader "Dragon/Charactor/CharactorMultiUV-MainPlayer" {
Properties {
 _Color ("Color", Color) = (0.97777,0.97777,0.97777,1)
 _MainTex ("Diffuse", 2D) = "white" { }
 _Ramp ("Ramp Texture", 2D) = "white" { }
 _backColor ("Back Color", Color) = (0,0.262,0.69,1)
 _backSwitch ("BackSwitch", Range(0,1)) = 1
 _Frssnelcolor ("Frssnelcolor", Color) = (0.5,0.5,0.5,1)
 _FrssnelValue ("FrssnelValue", Range(0,1)) = 0
 _Frssnellever ("Frssnellever", Float) = 3
 _LightColor ("LightColor", Color) = (1,1,1,1)
 _LightIntensity ("LightIntensity", Float) = 0
[HideInInspector]  _LightDir ("LightDir", Color) = (1,1,1,1)
 _Alpha ("Alpha", Range(0,1)) = 1
 _EmmisionTex ("EmissionTex", 2D) = "black" { }
 _Emmision ("Emission", Color) = (0,0,0,0)
 _EmmisionIntensity ("EmmisionIntensity", Range(0,1)) = 0
 _Rim ("Rim Texture", 2D) = "white" { }
 _color ("color", Color) = (0.977941,0.389193,0.172578,1)
 _rj_noies ("rj_noies", 2D) = "white" { }
 _RJ ("RJ", Range(0,1.2)) = 0
}
SubShader { 
 Tags { "RenderType"="Opaque" }
 Pass {
  Tags { "RenderType"="Opaque" }
  ZTest Greater
  ZWrite Off
  Stencil {
   Ref 2
   Pass Replace
  }
  Blend One One
  GpuProgramID 1174
Program "vp" {
SubProgram "d3d9 " {
"vs_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 unity_MatrixV;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _World2Object      c4       3
					//   unity_MatrixV      c7       2
					//
					
					    vs_2_0
					    def c9, 0.200000003, 0.5, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dp4 oPos.x, c0, v0
					    dp4 oPos.y, c1, v0
					    dp4 oPos.z, c2, v0
					    dp4 oPos.w, c3, v0
					    mul r0.xyz, v1.y, c5
					    mad r0.xyz, c4, v1.x, r0
					    mad r0.xyz, c6, v1.z, r0
					    nrm r1.xyz, r0
					    dp3 r0.x, c7, r1
					    dp3 r0.y, c8, r1
					    mad oT0.xy, r0, c9.x, c9.y
					
					// approximately 13 instruction slots used"
}
SubProgram "d3d11 " {
"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[12];
						mat4x4 _World2Object;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[5];
						mat4x4 unity_MatrixV;
						vec4 unused_1_2[7];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat2.xz = u_xlat0.yy * unity_MatrixV[1].xy;
					    u_xlat0.xy = unity_MatrixV[0].xy * u_xlat0.xx + u_xlat2.xz;
					    u_xlat0.xy = unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.200000003, 0.200000003) + vec2(0.5, 0.5);
					    return;
					}"
}
SubProgram "d3d11_9x " {
"vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[12];
						mat4x4 _World2Object;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_1_0[5];
						mat4x4 unity_MatrixV;
						vec4 unused_1_2[7];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat2.xz = u_xlat0.yy * unity_MatrixV[1].xy;
					    u_xlat0.xy = unity_MatrixV[0].xy * u_xlat0.xx + u_xlat2.xz;
					    u_xlat0.xy = unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD0.xy = u_xlat0.xy * vec2(0.200000003, 0.200000003) + vec2(0.5, 0.5);
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
"ps_2_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   sampler2D _Mask;
					//   float4 _backColor;
					//   float _backSwitch;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _backColor   c0       1
					//   _backSwitch  c1       1
					//   _Mask        s0       1
					//
					
					    ps_2_0
					    def c2, -1, 0, 0, 0
					    dcl_pp t0.xy
					    dcl_2d s0
					    texld_pp r0, t0, s0
					    mul_pp r0, r0.x, c0
					    add_pp r0, r0, r0
					    mov r1.w, c2.x
					    add r1.x, r1.w, c1.x
					    mul r1.x, r1.x, r1.x
					    cmp_pp r0, -r1.x, r0, c2.y
					    mov_pp oC0, r0
					
					// approximately 8 instruction slots used (1 texture, 7 arithmetic)"
}
SubProgram "d3d11 " {
"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _backColor;
						float _backSwitch;
					};
					uniform  sampler2D _Mask;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlatb0 = _backSwitch==1.0;
					    if(u_xlatb0){
					        u_xlat10_0 = texture(_Mask, vs_TEXCOORD0.xy);
					        u_xlat0 = u_xlat10_0.xxxx * _backColor;
					        SV_Target0 = u_xlat0 + u_xlat0;
					        return;
					    } else {
					        SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					        return;
					    //ENDIF
					    }
					    return;
					}"
}
SubProgram "d3d11_9x " {
"ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _backColor;
						float _backSwitch;
					};
					uniform  sampler2D _Mask;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					void main()
					{
					    u_xlatb0 = _backSwitch==1.0;
					    if(u_xlatb0){
					        u_xlat10_0 = texture(_Mask, vs_TEXCOORD0.xy);
					        u_xlat0 = u_xlat10_0.xxxx * _backColor;
					        SV_Target0 = u_xlat0 + u_xlat0;
					        return;
					    } else {
					        SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					        return;
					    //ENDIF
					    }
					    return;
					}"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
  Stencil {
   Ref 2
   Pass Replace
  }
  GpuProgramID 72772
Program "vp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//
					
					    vs_3_0
					    def c13, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c13.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//
					
					    vs_3_0
					    def c13, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c13.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   unity_FogParams    c11      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    dcl_texcoord6 o6.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    dp4 r0.x, c2, v0
					    mad o6.x, r0.x, c11.z, c11.w
					    mov o0.z, r0.x
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//   unity_FogParams    c13      1
					//
					
					    vs_3_0
					    def c14, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c14.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mad o7.x, r0.z, c13.z, c13.w
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   unity_FogParams    c11      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    dcl_texcoord6 o6.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    dp4 r0.x, c2, v0
					    mad o6.x, r0.x, c11.z, c11.w
					    mov o0.z, r0.x
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//   unity_FogParams    c13      1
					//
					
					    vs_3_0
					    def c14, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c14.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mad o7.x, r0.z, c13.z, c13.w
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//
					
					    vs_3_0
					    def c13, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c13.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.z, c2, v0
					    dp4 o0.w, c3, v0
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 17 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//
					
					    vs_3_0
					    def c13, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c13.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 22 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   unity_FogParams    c11      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    dcl_texcoord6 o6.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    dp4 r0.x, c2, v0
					    mad o6.x, r0.x, c11.z, c11.w
					    mov o0.z, r0.x
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//   unity_FogParams    c13      1
					//
					
					    vs_3_0
					    def c14, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c14.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mad o7.x, r0.z, c13.z, c13.w
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   unity_FogParams    c11      1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord4 o4.xy
					    dcl_texcoord5 o5.xy
					    dcl_texcoord6 o6.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 o0.x, c0, v0
					    dp4 o0.y, c1, v0
					    dp4 o0.w, c3, v0
					    dp4 r0.x, c2, v0
					    mad o6.x, r0.x, c11.z, c11.w
					    mov o0.z, r0.x
					    mov o1.xy, v2
					    mov o4.xy, v3
					    mov o5.xy, v4
					
					// approximately 19 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_0_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_1_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec3 u_xlat1;
					float u_xlat6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat0 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat0 = _Object2World[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = _Object2World[2] * in_POSITION0.zzzz + u_xlat0;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat0.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat0.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat0.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat1.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat1.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat1.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat1.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat1.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat1.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat0.xyz = u_xlat0.xyz + u_xlat1.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    vs_TEXCOORD2.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" "CUSTOM_SHADOW" }
					"vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   row_major float4x4 _Object2World;
					//   float4 _ProjectionParams;
					//   float4 _ScreenParams;
					//   row_major float4x4 _World2Object;
					//   row_major float4x4 glstate_matrix_mvp;
					//   float4 unity_FogParams;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _Object2World      c4       4
					//   _World2Object      c8       3
					//   _ProjectionParams  c11      1
					//   _ScreenParams      c12      1
					//   unity_FogParams    c13      1
					//
					
					    vs_3_0
					    def c14, 0.5, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_texcoord v2
					    dcl_texcoord1 v3
					    dcl_texcoord2 v4
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2
					    dcl_texcoord2 o3.xyz
					    dcl_texcoord3 o4
					    dcl_texcoord4 o5.xy
					    dcl_texcoord5 o6.xy
					    dcl_texcoord6 o7.x
					    mul r0.xyz, c9, v1.y
					    mad r0.xyz, c8, v1.x, r0
					    mad r0.xyz, c10, v1.z, r0
					    dp3 r0.w, r0, r0
					    rsq r0.w, r0.w
					    mul o3.xyz, r0.w, r0
					    dp4 o2.x, c4, v0
					    dp4 o2.y, c5, v0
					    dp4 o2.z, c6, v0
					    dp4 o2.w, c7, v0
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.w, c3, v0
					    mul r1.xyz, r0.xyww, c14.x
					    mul r1.w, r1.y, c11.x
					    mad o4.xy, r1.z, c12.zwzw, r1.xwzw
					    dp4 r0.z, c2, v0
					    mad o7.x, r0.z, c13.z, c13.w
					    mov o0, r0
					    mov o4.zw, r0
					    mov o1.xy, v2
					    mov o5.xy, v3
					    mov o6.xy, v4
					
					// approximately 23 instruction slots used"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "FogOn" "CUSTOM_SHADOW" }
					"vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerCamera {
						vec4 unused_0_0[5];
						vec4 _ProjectionParams;
						vec4 unused_0_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[8];
						mat4x4 _Object2World;
						mat4x4 _World2Object;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityFog {
						vec4 unused_2_0;
						vec4 unity_FogParams;
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					in  vec2 in_TEXCOORD2;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD4;
					out vec4 vs_TEXCOORD1;
					out vec3 vs_TEXCOORD2;
					out vec4 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD5;
					out float vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat10;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.xy = in_TEXCOORD1.xy;
					    u_xlat1 = in_POSITION0.yyyy * _Object2World[1];
					    u_xlat1 = _Object2World[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = _Object2World[2] * in_POSITION0.zzzz + u_xlat1;
					    vs_TEXCOORD1 = _Object2World[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat1.x = in_NORMAL0.x * _World2Object[0].x;
					    u_xlat1.y = in_NORMAL0.x * _World2Object[1].x;
					    u_xlat1.z = in_NORMAL0.x * _World2Object[2].x;
					    u_xlat2.x = in_NORMAL0.y * _World2Object[0].y;
					    u_xlat2.y = in_NORMAL0.y * _World2Object[1].y;
					    u_xlat2.z = in_NORMAL0.y * _World2Object[2].y;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat2.x = in_NORMAL0.z * _World2Object[0].z;
					    u_xlat2.y = in_NORMAL0.z * _World2Object[1].z;
					    u_xlat2.z = in_NORMAL0.z * _World2Object[2].z;
					    u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat10 = inversesqrt(u_xlat10);
					    vs_TEXCOORD2.xyz = vec3(u_xlat10) * u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat0.xyw * vec3(0.5, 0.5, 0.5);
					    u_xlat1.w = u_xlat1.y * _ProjectionParams.x;
					    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD3.zw = u_xlat0.zw;
					    vs_TEXCOORD6 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD5.xy = in_TEXCOORD2.xy;
					    return;
					}"
}
}
Program "fp" {
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   _WorldSpaceLightPos0       c1       1
					//   glstate_lightmodel_ambient c2       1
					//   _LightColor0               c3       1
					//   _Color                     c4       1
					//   _Frssnelcolor              c5       1
					//   _FrssnelValue              c6       1
					//   _Frssnellever              c7       1
					//   _Alpha                     c8       1
					//   _Emmision                  c9       1
					//   _EmmisionIntensity         c10      1
					//   _RJ                        c11      1
					//   _color                     c12      1
					//   _MainTex                   s0       1
					//   _Ramp                      s1       1
					//   _EmmisionTex               s2       1
					//   _Rim                       s3       1
					//   _rj_noies                  s4       1
					//
					
					    ps_3_0
					    def c13, 1.10000002, 0.5, -0.5, 0
					    def c14, 1, 25.5, 32.5, 0.03125
					    def c15, 5, 2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4_pp v3.xy
					    dcl_texcoord5_pp v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s4
					    mov r1.x, c13.x
					    mad r0.y, r0.x, r1.x, -c11.x
					    add r0.x, r0.x, -c11.x
					    cmp_pp r1, r0.y, c13.y, c13.z
					    texkill r1
					    dp3_pp r0.y, c1, v2
					    mad_pp r0.y, r0.y, c13.y, c13.y
					    texld_pp r1, v3, s0
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s0
					    mad_pp r0.y, r2.x, -c14.y, c14.z
					    mul_pp r1.y, r0.y, c14.w
					    texld_pp r1, r1, s1
					    texld_pp r2, v4, s0
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c4.xxyz
					    mul_pp r0.yzw, r0, c3.xxyz
					    texld_pp r1, v0, s2
					    mul_pp r1.xyz, r1, c9
					    mad_pp r1.xyz, r1, c10.x, r0.yzww
					    mul_pp r0.yzw, r0, c12.xxyz
					    mul_pp r0.yzw, r0, c15.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c13.w
					    add_pp r1.w, -r2.x, c14.x
					    pow_pp r2.z, r1.w, c7.x
					    mul_pp r3.xyz, r2.z, c5
					    mad_pp r1.xyz, r3, c6.x, r1
					    mov r3.y, c15.y
					    mad_pp r1.xyz, c2, r3.y, r1
					    mov r2.y, c14.x
					    texld_pp r2, r2, s3
					    mul_pp r1.xyz, r1, r2
					    cmp_pp oC0.xyz, r0.x, r1, r0.yzww
					    mov_pp oC0.w, c8.x
					
					// approximately 42 instruction slots used (7 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[5];
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_10;
						float _EmmisionIntensity;
						vec4 unused_0_12[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_3_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot(_WorldSpaceLightPos0.xyz, vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat1.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   _WorldSpaceLightPos0       c1       1
					//   glstate_lightmodel_ambient c2       1
					//   _LightColor0               c3       1
					//   _Color                     c4       1
					//   _Frssnelcolor              c5       1
					//   _FrssnelValue              c6       1
					//   _Frssnellever              c7       1
					//   _Alpha                     c8       1
					//   _Emmision                  c9       1
					//   _EmmisionIntensity         c10      1
					//   _RJ                        c11      1
					//   _color                     c12      1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _Ramp                      s2       1
					//   _EmmisionTex               s3       1
					//   _Rim                       s4       1
					//   _rj_noies                  s5       1
					//
					
					    ps_3_0
					    def c13, 1.10000002, 0.5, -0.5, 0
					    def c14, 1, 25.5, 32.5, 0.03125
					    def c15, 5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4_pp v4.xy
					    dcl_texcoord5_pp v5.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v0, s5
					    mov r1.x, c13.x
					    mad r0.y, r0.x, r1.x, -c11.x
					    add r0.x, r0.x, -c11.x
					    cmp_pp r1, r0.y, c13.y, c13.z
					    texkill r1
					    dp3_pp r0.y, c1, v2
					    mad_pp r0.y, r0.y, c13.y, c13.y
					    texld_pp r1, v4, s1
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s1
					    mad_pp r0.y, r2.x, -c14.y, c14.z
					    mul_pp r1.y, r0.y, c14.w
					    texld_pp r1, r1, s2
					    texld_pp r2, v5, s1
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c4.xxyz
					    mul_pp r0.yzw, r0, c3.xxyz
					    texld_pp r1, v0, s3
					    mul_pp r1.xyz, r1, c9
					    mad_pp r1.xyz, r1, c10.x, r0.yzww
					    mul_pp r0.yzw, r0, c12.xxyz
					    mul_pp r0.yzw, r0, c15.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c13.w
					    add_pp r1.w, -r2.x, c14.x
					    pow_pp r2.z, r1.w, c7.x
					    mul_pp r3.xyz, r2.z, c5
					    mad_pp r1.xyz, r3, c6.x, r1
					    add_pp r3.xyz, c2, c2
					    texldp_pp r4, v3, s0
					    mad_pp r1.xyz, r1, r4.x, r3
					    mov r2.y, c14.x
					    texld_pp r2, r2, s4
					    mul_pp r1.xyz, r1, r2
					    cmp_pp oC0.xyz, r0.x, r1, r0.yzww
					    mov_pp oC0.w, c8.x
					
					// approximately 43 instruction slots used (8 texture, 35 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[5];
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_10;
						float _EmmisionIntensity;
						vec4 unused_0_12[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_3_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec3 u_xlat7;
					vec2 u_xlat10;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot(_WorldSpaceLightPos0.xyz, vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat7.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_3.xxx + u_xlat7.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   _WorldSpaceLightPos0       c1       1
					//   glstate_lightmodel_ambient c2       1
					//   unity_FogColor             c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _Frssnelcolor              c6       1
					//   _FrssnelValue              c7       1
					//   _Frssnellever              c8       1
					//   _Alpha                     c9       1
					//   _Emmision                  c10      1
					//   _EmmisionIntensity         c11      1
					//   _RJ                        c12      1
					//   _color                     c13      1
					//   _MainTex                   s0       1
					//   _Ramp                      s1       1
					//   _EmmisionTex               s2       1
					//   _Rim                       s3       1
					//   _rj_noies                  s4       1
					//
					
					    ps_3_0
					    def c14, 1.10000002, 0.5, -0.5, 0
					    def c15, 1, 25.5, 32.5, 0.03125
					    def c16, 5, 2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4_pp v3.xy
					    dcl_texcoord5_pp v4.xy
					    dcl_texcoord6_pp v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s4
					    mov r1.x, c14.x
					    mad r0.y, r0.x, r1.x, -c12.x
					    add r0.x, r0.x, -c12.x
					    cmp_pp r1, r0.y, c14.y, c14.z
					    texkill r1
					    dp3_pp r0.y, c1, v2
					    mad_pp r0.y, r0.y, c14.y, c14.y
					    texld_pp r1, v3, s0
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s0
					    mad_pp r0.y, r2.x, -c15.y, c15.z
					    mul_pp r1.y, r0.y, c15.w
					    texld_pp r1, r1, s1
					    texld_pp r2, v4, s0
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c5.xxyz
					    mul_pp r0.yzw, r0, c4.xxyz
					    texld_pp r1, v0, s2
					    mul_pp r1.xyz, r1, c10
					    mad_pp r1.xyz, r1, c11.x, r0.yzww
					    mul_pp r0.yzw, r0, c13.xxyz
					    mul_pp r0.yzw, r0, c16.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c14.w
					    add_pp r1.w, -r2.x, c15.x
					    pow_pp r2.z, r1.w, c8.x
					    mul_pp r3.xyz, r2.z, c6
					    mad_pp r1.xyz, r3, c7.x, r1
					    mov r3.y, c16.y
					    mad_pp r1.xyz, c2, r3.y, r1
					    mov r2.y, c15.x
					    texld_pp r2, r2, s3
					    mul_pp r1.xyz, r1, r2
					    cmp_pp r0.xyz, r0.x, r1, r0.yzww
					    add_pp r0.xyz, r0, -c3
					    mov_sat_pp r0.w, v5.x
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c9.x
					
					// approximately 45 instruction slots used (7 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[5];
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_10;
						float _EmmisionIntensity;
						vec4 unused_0_12[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_3_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot(_WorldSpaceLightPos0.xyz, vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat1.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor0;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _WorldSpaceLightPos0;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   _WorldSpaceLightPos0       c1       1
					//   glstate_lightmodel_ambient c2       1
					//   unity_FogColor             c3       1
					//   _LightColor0               c4       1
					//   _Color                     c5       1
					//   _Frssnelcolor              c6       1
					//   _FrssnelValue              c7       1
					//   _Frssnellever              c8       1
					//   _Alpha                     c9       1
					//   _Emmision                  c10      1
					//   _EmmisionIntensity         c11      1
					//   _RJ                        c12      1
					//   _color                     c13      1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _Ramp                      s2       1
					//   _EmmisionTex               s3       1
					//   _Rim                       s4       1
					//   _rj_noies                  s5       1
					//
					
					    ps_3_0
					    def c14, 1.10000002, 0.5, -0.5, 0
					    def c15, 1, 25.5, 32.5, 0.03125
					    def c16, 5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4_pp v4.xy
					    dcl_texcoord5_pp v5.xy
					    dcl_texcoord6_pp v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v0, s5
					    mov r1.x, c14.x
					    mad r0.y, r0.x, r1.x, -c12.x
					    add r0.x, r0.x, -c12.x
					    cmp_pp r1, r0.y, c14.y, c14.z
					    texkill r1
					    dp3_pp r0.y, c1, v2
					    mad_pp r0.y, r0.y, c14.y, c14.y
					    texld_pp r1, v4, s1
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s1
					    mad_pp r0.y, r2.x, -c15.y, c15.z
					    mul_pp r1.y, r0.y, c15.w
					    texld_pp r1, r1, s2
					    texld_pp r2, v5, s1
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c5.xxyz
					    mul_pp r0.yzw, r0, c4.xxyz
					    texld_pp r1, v0, s3
					    mul_pp r1.xyz, r1, c10
					    mad_pp r1.xyz, r1, c11.x, r0.yzww
					    mul_pp r0.yzw, r0, c13.xxyz
					    mul_pp r0.yzw, r0, c16.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c14.w
					    add_pp r1.w, -r2.x, c15.x
					    pow_pp r2.z, r1.w, c8.x
					    mul_pp r3.xyz, r2.z, c6
					    mad_pp r1.xyz, r3, c7.x, r1
					    add_pp r3.xyz, c2, c2
					    texldp_pp r4, v3, s0
					    mad_pp r1.xyz, r1, r4.x, r3
					    mov r2.y, c15.x
					    texld_pp r2, r2, s4
					    mul_pp r1.xyz, r1, r2
					    cmp_pp r0.xyz, r0.x, r1, r0.yzww
					    add_pp r0.xyz, r0, -c3
					    mov_sat_pp r0.w, v6.x
					    mad_pp oC0.xyz, r0.w, r0, c3
					    mov_pp oC0.w, c9.x
					
					// approximately 46 instruction slots used (8 texture, 38 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _LightColor0;
						vec4 unused_0_2;
						vec4 _Color;
						vec4 unused_0_4[5];
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_10;
						float _EmmisionIntensity;
						vec4 unused_0_12[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityLighting {
						vec4 _WorldSpaceLightPos0;
						vec4 unused_2_1[44];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_3_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_4_1;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec3 u_xlat7;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot(_WorldSpaceLightPos0.xyz, vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _LightColor0.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat7.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_3.xxx + u_xlat7.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor;
					//   float4 _LightDir;
					//   float _LightIntensity;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   glstate_lightmodel_ambient c1       1
					//   _Color                     c2       1
					//   _LightColor                c3       1
					//   _LightDir                  c4       1
					//   _LightIntensity            c5       1
					//   _Frssnelcolor              c6       1
					//   _FrssnelValue              c7       1
					//   _Frssnellever              c8       1
					//   _Alpha                     c9       1
					//   _Emmision                  c10      1
					//   _EmmisionIntensity         c11      1
					//   _RJ                        c12      1
					//   _color                     c13      1
					//   _MainTex                   s0       1
					//   _Ramp                      s1       1
					//   _EmmisionTex               s2       1
					//   _Rim                       s3       1
					//   _rj_noies                  s4       1
					//
					
					    ps_3_0
					    def c14, 1.10000002, 0.5, -0.5, 0
					    def c15, 1, 25.5, 32.5, 0.03125
					    def c16, 5, 2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4_pp v3.xy
					    dcl_texcoord5_pp v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s4
					    mov r1.x, c14.x
					    mad r0.y, r0.x, r1.x, -c12.x
					    add r0.x, r0.x, -c12.x
					    cmp_pp r1, r0.y, c14.y, c14.z
					    texkill r1
					    dp3_pp r0.y, -c4, v2
					    mad_pp r0.y, r0.y, c14.y, c14.y
					    texld_pp r1, v3, s0
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s0
					    mad_pp r0.y, r2.x, -c15.y, c15.z
					    mul_pp r1.y, r0.y, c15.w
					    texld_pp r1, r1, s1
					    texld_pp r2, v4, s0
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c2.xxyz
					    mov r1.x, c5.x
					    mul_pp r1.xyz, r1.x, c3
					    mul_pp r0.yzw, r0, r1.xxyz
					    texld_pp r1, v0, s2
					    mul_pp r1.xyz, r1, c10
					    mad_pp r1.xyz, r1, c11.x, r0.yzww
					    mul_pp r0.yzw, r0, c13.xxyz
					    mul_pp r0.yzw, r0, c16.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c14.w
					    add_pp r1.w, -r2.x, c15.x
					    pow_pp r2.z, r1.w, c8.x
					    mul_pp r3.xyz, r2.z, c6
					    mad_pp r1.xyz, r3, c7.x, r1
					    mov r3.y, c16.y
					    mad_pp r1.xyz, c1, r3.y, r1
					    mov r2.y, c15.x
					    texld_pp r2, r2, s3
					    mul_pp r1.xyz, r1, r2
					    cmp_pp oC0.xyz, r0.x, r1, r0.yzww
					    mov_pp oC0.w, c9.x
					
					// approximately 44 instruction slots used (7 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _Color;
						vec4 unused_0_2[2];
						vec4 _LightColor;
						vec4 _LightDir;
						float _LightIntensity;
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_11;
						float _EmmisionIntensity;
						vec4 unused_0_13[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_2_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot((-_LightDir.xyz), vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat1.xyz = _LightColor.xyz * vec3(_LightIntensity);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat1.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor;
					//   float4 _LightDir;
					//   float _LightIntensity;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   glstate_lightmodel_ambient c1       1
					//   _Color                     c2       1
					//   _LightColor                c3       1
					//   _LightDir                  c4       1
					//   _LightIntensity            c5       1
					//   _Frssnelcolor              c6       1
					//   _FrssnelValue              c7       1
					//   _Frssnellever              c8       1
					//   _Alpha                     c9       1
					//   _Emmision                  c10      1
					//   _EmmisionIntensity         c11      1
					//   _RJ                        c12      1
					//   _color                     c13      1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _Ramp                      s2       1
					//   _EmmisionTex               s3       1
					//   _Rim                       s4       1
					//   _rj_noies                  s5       1
					//
					
					    ps_3_0
					    def c14, 1.10000002, 0.5, -0.5, 0
					    def c15, 1, 25.5, 32.5, 0.03125
					    def c16, 5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4_pp v4.xy
					    dcl_texcoord5_pp v5.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v0, s5
					    mov r1.x, c14.x
					    mad r0.y, r0.x, r1.x, -c12.x
					    add r0.x, r0.x, -c12.x
					    cmp_pp r1, r0.y, c14.y, c14.z
					    texkill r1
					    dp3_pp r0.y, -c4, v2
					    mad_pp r0.y, r0.y, c14.y, c14.y
					    texld_pp r1, v4, s1
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s1
					    mad_pp r0.y, r2.x, -c15.y, c15.z
					    mul_pp r1.y, r0.y, c15.w
					    texld_pp r1, r1, s2
					    texld_pp r2, v5, s1
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c2.xxyz
					    mov r1.x, c5.x
					    mul_pp r1.xyz, r1.x, c3
					    mul_pp r0.yzw, r0, r1.xxyz
					    texld_pp r1, v0, s3
					    mul_pp r1.xyz, r1, c10
					    mad_pp r1.xyz, r1, c11.x, r0.yzww
					    mul_pp r0.yzw, r0, c13.xxyz
					    mul_pp r0.yzw, r0, c16.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c14.w
					    add_pp r1.w, -r2.x, c15.x
					    pow_pp r2.z, r1.w, c8.x
					    mul_pp r3.xyz, r2.z, c6
					    mad_pp r1.xyz, r3, c7.x, r1
					    add_pp r3.xyz, c1, c1
					    texldp_pp r4, v3, s0
					    mad_pp r1.xyz, r1, r4.x, r3
					    mov r2.y, c15.x
					    texld_pp r2, r2, s4
					    mul_pp r1.xyz, r1, r2
					    cmp_pp oC0.xyz, r0.x, r1, r0.yzww
					    mov_pp oC0.w, c9.x
					
					// approximately 45 instruction slots used (8 texture, 37 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "CUSTOM_SHADOW" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _Color;
						vec4 unused_0_2[2];
						vec4 _LightColor;
						vec4 _LightDir;
						float _LightIntensity;
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_11;
						float _EmmisionIntensity;
						vec4 unused_0_13[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_2_2[11];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec3 u_xlat7;
					vec2 u_xlat10;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot((-_LightDir.xyz), vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat1.xyz = _LightColor.xyz * vec3(_LightIntensity);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat7.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_3.xxx + u_xlat7.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    SV_Target0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor;
					//   float4 _LightDir;
					//   float _LightIntensity;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   glstate_lightmodel_ambient c1       1
					//   unity_FogColor             c2       1
					//   _Color                     c3       1
					//   _LightColor                c4       1
					//   _LightDir                  c5       1
					//   _LightIntensity            c6       1
					//   _Frssnelcolor              c7       1
					//   _FrssnelValue              c8       1
					//   _Frssnellever              c9       1
					//   _Alpha                     c10      1
					//   _Emmision                  c11      1
					//   _EmmisionIntensity         c12      1
					//   _RJ                        c13      1
					//   _color                     c14      1
					//   _MainTex                   s0       1
					//   _Ramp                      s1       1
					//   _EmmisionTex               s2       1
					//   _Rim                       s3       1
					//   _rj_noies                  s4       1
					//
					
					    ps_3_0
					    def c15, 1.10000002, 0.5, -0.5, 0
					    def c16, 1, 25.5, 32.5, 0.03125
					    def c17, 5, 2, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord4_pp v3.xy
					    dcl_texcoord5_pp v4.xy
					    dcl_texcoord6_pp v5.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v0, s4
					    mov r1.x, c15.x
					    mad r0.y, r0.x, r1.x, -c13.x
					    add r0.x, r0.x, -c13.x
					    cmp_pp r1, r0.y, c15.y, c15.z
					    texkill r1
					    dp3_pp r0.y, -c5, v2
					    mad_pp r0.y, r0.y, c15.y, c15.y
					    texld_pp r1, v3, s0
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s0
					    mad_pp r0.y, r2.x, -c16.y, c16.z
					    mul_pp r1.y, r0.y, c16.w
					    texld_pp r1, r1, s1
					    texld_pp r2, v4, s0
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c3.xxyz
					    mov r1.x, c6.x
					    mul_pp r1.xyz, r1.x, c4
					    mul_pp r0.yzw, r0, r1.xxyz
					    texld_pp r1, v0, s2
					    mul_pp r1.xyz, r1, c11
					    mad_pp r1.xyz, r1, c12.x, r0.yzww
					    mul_pp r0.yzw, r0, c14.xxyz
					    mul_pp r0.yzw, r0, c17.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c15.w
					    add_pp r1.w, -r2.x, c16.x
					    pow_pp r2.z, r1.w, c9.x
					    mul_pp r3.xyz, r2.z, c7
					    mad_pp r1.xyz, r3, c8.x, r1
					    mov r3.y, c17.y
					    mad_pp r1.xyz, c1, r3.y, r1
					    mov r2.y, c16.x
					    texld_pp r2, r2, s3
					    mul_pp r1.xyz, r1, r2
					    cmp_pp r0.xyz, r0.x, r1, r0.yzww
					    add_pp r0.xyz, r0, -c2
					    mov_sat_pp r0.w, v5.x
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c10.x
					
					// approximately 47 instruction slots used (7 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _Color;
						vec4 unused_0_2[2];
						vec4 _LightColor;
						vec4 _LightDir;
						float _LightIntensity;
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_11;
						float _EmmisionIntensity;
						vec4 unused_0_13[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_2_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot((-_LightDir.xyz), vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat1.xyz = _LightColor.xyz * vec3(_LightIntensity);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat1.xyz = glstate_lightmodel_ambient.xyz * vec3(2.0, 2.0, 2.0) + u_xlat1.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
SubProgram "d3d9 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
					//
					// Parameters:
					//
					//   float _Alpha;
					//   float4 _Color;
					//   float4 _Emmision;
					//   float _EmmisionIntensity;
					//   sampler2D _EmmisionTex;
					//   float _FrssnelValue;
					//   float4 _Frssnelcolor;
					//   float _Frssnellever;
					//   float4 _LightColor;
					//   float4 _LightDir;
					//   float _LightIntensity;
					//   sampler2D _MainTex;
					//   float _RJ;
					//   sampler2D _Ramp;
					//   sampler2D _Rim;
					//   sampler2D _ShadowMapTexture;
					//   float3 _WorldSpaceCameraPos;
					//   float4 _color;
					//   sampler2D _rj_noies;
					//   float4 glstate_lightmodel_ambient;
					//   float4 unity_FogColor;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _WorldSpaceCameraPos       c0       1
					//   glstate_lightmodel_ambient c1       1
					//   unity_FogColor             c2       1
					//   _Color                     c3       1
					//   _LightColor                c4       1
					//   _LightDir                  c5       1
					//   _LightIntensity            c6       1
					//   _Frssnelcolor              c7       1
					//   _FrssnelValue              c8       1
					//   _Frssnellever              c9       1
					//   _Alpha                     c10      1
					//   _Emmision                  c11      1
					//   _EmmisionIntensity         c12      1
					//   _RJ                        c13      1
					//   _color                     c14      1
					//   _ShadowMapTexture          s0       1
					//   _MainTex                   s1       1
					//   _Ramp                      s2       1
					//   _EmmisionTex               s3       1
					//   _Rim                       s4       1
					//   _rj_noies                  s5       1
					//
					
					    ps_3_0
					    def c15, 1.10000002, 0.5, -0.5, 0
					    def c16, 1, 25.5, 32.5, 0.03125
					    def c17, 5, 0, 0, 0
					    dcl_texcoord_pp v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_texcoord2_pp v2.xyz
					    dcl_texcoord3 v3
					    dcl_texcoord4_pp v4.xy
					    dcl_texcoord5_pp v5.xy
					    dcl_texcoord6_pp v6.x
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    dcl_2d s5
					    texld_pp r0, v0, s5
					    mov r1.x, c15.x
					    mad r0.y, r0.x, r1.x, -c13.x
					    add r0.x, r0.x, -c13.x
					    cmp_pp r1, r0.y, c15.y, c15.z
					    texkill r1
					    dp3_pp r0.y, -c5, v2
					    mad_pp r0.y, r0.y, c15.y, c15.y
					    texld_pp r1, v4, s1
					    mul_pp r1.x, r0.y, r1.y
					    texld_pp r2, v0, s1
					    mad_pp r0.y, r2.x, -c16.y, c16.z
					    mul_pp r1.y, r0.y, c16.w
					    texld_pp r1, r1, s2
					    texld_pp r2, v5, s1
					    mul_pp r0.yzw, r1.xxyz, r2.z
					    mul_pp r0.yzw, r0, c3.xxyz
					    mov r1.x, c6.x
					    mul_pp r1.xyz, r1.x, c4
					    mul_pp r0.yzw, r0, r1.xxyz
					    texld_pp r1, v0, s3
					    mul_pp r1.xyz, r1, c11
					    mad_pp r1.xyz, r1, c12.x, r0.yzww
					    mul_pp r0.yzw, r0, c14.xxyz
					    mul_pp r0.yzw, r0, c17.x
					    add r2.xyz, c0, -v1
					    nrm_pp r3.xyz, r2
					    dp3_pp r1.w, r3, v2
					    max_pp r2.x, r1.w, c15.w
					    add_pp r1.w, -r2.x, c16.x
					    pow_pp r2.z, r1.w, c9.x
					    mul_pp r3.xyz, r2.z, c7
					    mad_pp r1.xyz, r3, c8.x, r1
					    add_pp r3.xyz, c1, c1
					    texldp_pp r4, v3, s0
					    mad_pp r1.xyz, r1, r4.x, r3
					    mov r2.y, c16.x
					    texld_pp r2, r2, s4
					    mul_pp r1.xyz, r1, r2
					    cmp_pp r0.xyz, r0.x, r1, r0.yzww
					    add_pp r0.xyz, r0, -c2
					    mov_sat_pp r0.w, v6.x
					    mad_pp oC0.xyz, r0.w, r0, c2
					    mov_pp oC0.w, c10.x
					
					// approximately 48 instruction slots used (8 texture, 40 arithmetic)"
}
SubProgram "d3d11 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "FogOn" "CUSTOM_SHADOW" }
					"ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[8];
						vec4 _Color;
						vec4 unused_0_2[2];
						vec4 _LightColor;
						vec4 _LightDir;
						float _LightIntensity;
						vec4 _Frssnelcolor;
						float _FrssnelValue;
						float _Frssnellever;
						float _Alpha;
						vec4 _Emmision;
						vec4 unused_0_11;
						float _EmmisionIntensity;
						vec4 unused_0_13[2];
						float _RJ;
						vec4 _color;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2[4];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[4];
						vec4 glstate_lightmodel_ambient;
						vec4 unused_2_2[11];
					};
					layout(std140) uniform UnityFog {
						vec4 unity_FogColor;
						vec4 unused_3_1;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _rj_noies;
					uniform  sampler2D _EmmisionTex;
					uniform  sampler2D _Rim;
					uniform  sampler2D _Ramp;
					uniform  sampler2D _ShadowMapTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD4;
					in  vec4 vs_TEXCOORD1;
					in  vec3 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD5;
					in  float vs_TEXCOORD6;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					bvec2 u_xlatb0;
					vec3 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat16_4;
					vec3 u_xlat7;
					vec2 u_xlat10;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = texture(_rj_noies, vs_TEXCOORD0.xy);
					    u_xlat0.y = u_xlat0.x * 1.10000002;
					    u_xlatb0.xy = greaterThanEqual(u_xlat0.xyxx, vec4(_RJ)).xy;
					    u_xlat0.x = u_xlatb0.x ? 1.0 : float(0.0);
					    if(((int(u_xlatb0.y) * int(0xffffffffu)))==0){discard;}
					    u_xlat4.x = dot((-_LightDir.xyz), vs_TEXCOORD2.xyz);
					    u_xlat4.x = u_xlat4.x * 0.5 + 0.5;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat1.x = u_xlat4.x * u_xlat10_1.y;
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_4.x = (-u_xlat10_2.x) * 25.5 + 32.5;
					    u_xlat1.y = u_xlat16_4.x * 0.03125;
					    u_xlat10_1 = texture(_Ramp, u_xlat1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD5.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat10_2.zzz;
					    u_xlat4.xyz = u_xlat16_4.xyz * _Color.xyz;
					    u_xlat1.xyz = _LightColor.xyz * vec3(_LightIntensity);
					    u_xlat4.xyz = u_xlat4.xyz * u_xlat1.xyz;
					    u_xlat10_1 = texture(_EmmisionTex, vs_TEXCOORD0.xy);
					    u_xlat1.xyz = u_xlat10_1.xyz * _Emmision.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * vec3(_EmmisionIntensity) + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * _color.xyz;
					    u_xlat4.xyz = u_xlat4.xyz * vec3(5.0, 5.0, 5.0);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, vs_TEXCOORD2.xyz);
					    u_xlat2.x = max(u_xlat13, 0.0);
					    u_xlat13 = (-u_xlat2.x) + 1.0;
					    u_xlat13 = log2(u_xlat13);
					    u_xlat13 = u_xlat13 * _Frssnellever;
					    u_xlat13 = exp2(u_xlat13);
					    u_xlat3.xyz = vec3(u_xlat13) * _Frssnelcolor.xyz;
					    u_xlat1.xyz = u_xlat3.xyz * vec3(_FrssnelValue) + u_xlat1.xyz;
					    u_xlat10.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat10_3 = texture(_ShadowMapTexture, u_xlat10.xy);
					    u_xlat7.xyz = glstate_lightmodel_ambient.xyz + glstate_lightmodel_ambient.xyz;
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_3.xxx + u_xlat7.xyz;
					    u_xlat2.y = 1.0;
					    u_xlat10_2 = texture(_Rim, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat12 = vs_TEXCOORD6;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    SV_Target0.xyz = vec3(u_xlat12) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.w = _Alpha;
					    return;
					}"
}
}
 }
}
Fallback "Diffuse"
}